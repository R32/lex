// For template variables, please check CLexer.Config

const static unsigned ::if (states_over_255):: short ::else:: char ::end:: _lextable[] = {
::table::
};

#define LEX_TABSIZE      ::tabsize::
#define LEX_TABSPAN      ::stride::
#define LEX_EXIT(s)      (_lextable[(LEX_TABSIZE - 1) - (s)])
#define LEX_TRANS(s, c)  (_lextable[((s) * LEX_TABSPAN) + (c)])

static int _entry(struct rlex*, int);

::foreach entrys::
#define ::uname::_BEGIN    ::begin::
#define ::name::()        (_entry(lex, ::begin::))
::end::
static int _cases(struct rlex* lex, int _q) {
	int _ret = ::eof::;
	switch(_q) {
::foreach cases::
	case ::index:::
	{
		::action::
	}
	break;
::end::
	default:
	{
		::epsilon::
	}
	break;

	}
	return _ret;
}
::foreach entrys::
#undef ::name::
::end::

static int _entry(struct rlex* lex, int begin) {
	if (rlex_end(lex)) {
		lex->pos.min = lex->pos.max;
		return ::eof::;
	}
	int c;
	int i = lex->pos.max;
	int state = begin;
	int prev = begin;
	while(i < lex->size) {
		c = rlex_char(lex, i++);
::if ((stride == 128) || (!utf8))::
		if (c > ::(stride - 1)::)
			c = ::(stride - 1)::;
::end::
		state = LEX_TRANS(state, c);
		if (state >= ::nsegs::)
			break;
		prev = state;
	}
	lex->pos.min = i; // if UnMatached then pmin >= pmax
	if (state == ::invalid::) {
		state = prev;
		i--;
	}
	int q = LEX_EXIT(state);
	if (i > lex->pos.max && q < ::nrules::) {
		lex->pos.min = lex->pos.max;
		lex->pos.max = i;
	} else {
		q = LEX_EXIT(begin);
	}
	return _cases(lex, q);
}
static int __token(struct rlex* lex) {
	return _entry(lex, ::entrybegin:: );
}

// public function
void ::prefix::_init_lexeme(struct rlex* lex, LEXCHAR *src, int size) {
	lex->pos = (struct rlex_position){0, 0};
	lex->size = size;
	lex->src = (unsigned char*)src;
	lex->token = __token;
}
